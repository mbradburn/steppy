AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  DockerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: hello-world
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DockerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: logs
          Name: 0
      Cpu: 1024
      ExecutionRoleArn: !GetAtt DockerTaskExecutionRole.Arn
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt DockerTaskTaskRole.Arn
      Volumes: []
    DependsOn: DockerTaskLogGroup
  DockerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-DockerTask/logs
  DockerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTask-execution
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  DockerTaskTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTask-task
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}-StateMachine
      DefinitionUri: StateMachine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Tracing:
        Enabled: true
      Role: !GetAtt StateMachineRole.Arn
      DefinitionSubstitutions:
        FOO: !Ref DefaultVPCSubnets
        DockerTaskArn: !Ref DockerTask
        DockerTaskSubnets: !Ref DefaultVPCSubnets
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-StateMachine
      Policies:
        - PolicyName: Log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'
        - PolicyName: InvokeDockerTask
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: !Ref DockerTask
              - Effect: Allow
                Action:
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource: '*'
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt DockerTaskExecutionRole.Arn
                  - !GetAtt DockerTaskTaskRole.Arn
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/stateMachine/${AWS::StackName}-StateMachine
Parameters:
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)